{"post":{"metadata":{"icon":"🔮","title":"Reverse Engineering a Unity Game","date":"2022-06-05T00:00:00.000Z","excerpt":"How I found the boss claw patrol logic in Boneworks and built a mod to change it."},"content":"<p>I've always wondered how people mod games -- figuring out all the APIs, what they do and hooking into them to make something cool. I recently went through this process of understanding the exact logic used in a part of the game and building a mod to change it. During this I learnt how C# and Unity compile to machine code, how to read disassembled x86 code and the various tools to help with these tasks. But before I get to that, I'll explain what I'm modding and why.</p>\n<ul>\n<li>\n<a href=\"#introduction\">🎙️ Introduction</a>\n</li>\n<li>\n<a href=\"#technical-background\">⚙️ Technical background</a>\n<ul>\n<li>\n<a href=\"#how-the-game-is-compiled\">🏗️ How the game is compiled</a>\n</li>\n<li>\n<a href=\"#c-decompilers\">🪛 C# decompilers</a>\n</li>\n<li>\n<a href=\"#il2cpp-reversers\">🪄 IL2CPP reversers</a>\n</li>\n<li>\n<a href=\"#x86-disassemblers\">🤖 x86 disassemblers</a>\n</li>\n<li>\n<a href=\"#inspecting-a-running-game\">⏯️ Inspecting a running game</a>\n</li>\n</ul>\n</li>\n<li>\n<a href=\"#reverse-engineering-the-boss-claw\">🗜️ Reverse engineering the boss claw</a>\n<ul>\n<li>\n<a href=\"#building-the-mod\">🧑‍💻 Building the mod</a>\n<ul>\n<li>\n<a href=\"#links\">Links</a>\n</li>\n</ul>\n</li>\n<li>\n<a href=\"#decompiling-the-code\">🔍 Decompiling the code</a>\n</li>\n<li>\n<a href=\"#disassembling-the-code\">🔬 Disassembling the code</a>\n</li>\n</ul>\n</li>\n<li>\n<a href=\"#conclusion\">📃 Conclusion</a>\n</li>\n</ul>\n<h2 id=\"introduction\"><a href=\"#introduction\"></a>🎙️ Introduction</h2>\n<p><a href=\"https://store.steampowered.com/app/823500/BONEWORKS/\">Boneworks</a> is amazing! 😍 If you're wondering why it's so great <a href=\"https://www.youtube.com/watch?v=7irWC2uXuSY\">this video</a> sums it up nicely. I bought it when I first got my VR headset a year ago but my first playthrough was a nauseating experience as I managed to get my body stuck in the monkey bars of the museum. 🤢 I never even saw an enemy before putting it down and getting into other games like Beat Saber. But about a month ago I picked it back up and to my surprise I no longer got motion sick! I played through the whole story and the side chambers and loved it so much that I decided to keep playing it and turn to one of my favourite pastimes: speedrunning. 🏃 I mostly enjoy watching speedruns and letting other people put in the hundreds of hours of grinding and glitch hunting, so two weeks in and <a href=\"https://www.youtube.com/watch?v=fWU1n0-W-wA\">with a respectable time</a> that would have placed in the top 20 on the leaderboard if I'd submitted it, this was probably the furthest I'd ever gone into running a game myself. At this point, to get better times I needed to practise tricks like <a href=\"https://youtu.be/1nZAoV9Tna8?t=167\">flinging from the boss claw to the finish of Streets</a> so I could pull them off consistently. The problem with this is that the direction the boss claw travels is totally random, so it is annoying to practise when it rarely goes the right way for a fling. 😩 That's when I set out to fix this. I decided to build a mod to force it in the right direction and also see if I could reverse engineer the logic used to decide where the boss claw will go.</p>\n<h2 id=\"technical-background\"><a href=\"#technical-background\"></a>⚙️ Technical background</h2>\n<p>This section will be pretty dense so I'll include a <strong>tl;dr</strong> for each section in a quote block at the beginning.</p>\n<h3 id=\"how-the-game-is-compiled\"><a href=\"#how-the-game-is-compiled\"></a>🏗️ How the game is compiled</h3>\n<blockquote>\n<p>C# source code -> compiled to C# IL -> compiled to C++ code by IL2CPP -> compiled to x86 binary.</p>\n</blockquote>\n<p>Boneworks is a <a href=\"https://unity.com/\">Unity</a> game, and as such the code is written in <a href=\"https://en.wikipedia.org/wiki/C_Sharp_(programming_language)\">C#</a>. A lot of languages (eg. <a href=\"https://en.wikipedia.org/wiki/C%2B%2B\">C++</a>) compile into instructions for a particular CPU architecture (eg. <a href=\"https://en.wikipedia.org/wiki/X86\">x86</a> which is most popular for PCs today), but C# compiles to an intermediate language (IL) which no CPU understands. Instead an execution engine (eg. <a href=\"https://en.wikipedia.org/wiki/Mono_(software)\">Mono</a>) interprets, compiles and runs the IL when the program is run. However this <a href=\"https://en.wikipedia.org/wiki/Just-in-time_compilation\">just-in-time compiling</a> of the code adds overhead and for games, faster is better. This is why Unity built a tool called <a href=\"https://docs.unity3d.com/Manual/IL2CPP.html\">IL2CPP</a>.</p>\n<p>IL2CPP transforms the IL into C++ code (as the name suggests). This C++ code can then be compiled to a particular CPU architecture, eliminating the overhead of an execution engine. One thing that is important to note though: usually in C++ the names of your variables and structures don't matter because they are all compiled down to memory addresses, but C# supports (and heavily uses) <a href=\"https://en.wikipedia.org/wiki/Reflective_programming\">reflection</a> which allows code to introspect things like method names and types. IL2CPP outputs a file with all these symbols that the C++ code can use so that reflection features work. The compiled output (whether IL or IL2CPP binary) is a <code>.dll</code> file that is known in C# terminology as an <em>assembly</em> (which is confusing because it is referring to a file containing machine code, while in computer science terminology the word assembly generally refers to human-readable text format representing some machine code, and I'll be using this other definition further below when we get into disassembly).</p>\n<p>So now that we have some background on how the game is compiled and which data is available, we can get to the actual process of reverse engineering!</p>\n<h3 id=\"c-decompilers\"><a href=\"#c-decompilers\"></a>🪛 C# decompilers</h3>\n<blockquote>\n<p>dnSpy and ILSpy allow reading compiled C# code but won't work for Boneworks because of IL2CPP.</p>\n</blockquote>\n<p><a href=\"https://github.com/dnSpy/dnSpy\">dnSpy</a> is a popular tool which can do things like showing, debugging and editing C# code for a game. But this only works for IL (because IL instructions are similar to actual C# code) and doesn't work for IL2CPP assemblies. The tool has also been archived by the owner, so is no longer under development.</p>\n<p><a href=\"https://github.com/icsharpcode/ILSpy\">ILSpy</a> is another tool which does the same thing as dnSpy but seems less friendly. It is older and still actively developed though.</p>\n<p>It would be great if I could open Boneworks with these tools since it would be really easy to read the C# code and see what the boss claw logic is, but ultimately it's not possible because they only read IL, not x86 binaries produced by IL2CPP. 🚧</p>\n<h3 id=\"il2cpp-reversers\"><a href=\"#il2cpp-reversers\"></a>🪄 IL2CPP reversers</h3>\n<blockquote>\n<p>Il2CppInspector outputs the classes/methods/properties, their types and locations in the assembly. Cpp2IL converts the assembly to IL (which can be used with dnSpy/ILSpy).</p>\n</blockquote>\n<p><a href=\"https://github.com/djkaty/Il2CppInspector\">Il2CppInspector</a> is a tool that reads the reflection metadata from a compiled IL2CPP project. This gives us a list of all the classes, methods and properties with types as well as the address where they are in the assembly. The author has a <a href=\"https://katyscode.wordpress.com/tag/il2cpp/\">great blog series</a> that goes into how it works and the various obfuscation techniques game developers use to hide the reflection metadata from reverse engineering. It worked out of the box for Boneworks though (and the developers -- Stress Level Zero -- are modding-friendly by the way) so I had no issue with this. There are plenty of output options, like creating a C# project with class/method stubs, C headers and Python scripts to assign class/method names to locations in disassemblers.</p>\n<p><a href=\"https://github.com/SamboyCoding/Cpp2IL\">Cpp2IL</a> is a really interesting project that aims to reconstruct the IL from the compiled C++. C# decompilers like dnSpy/ILSpy can then be used to read the code in a much more friendly syntax than x86 assembly. I imagine IL2CPP produces a particular set of C++ code for some C# code, so that seems reversible but C++ to machine code can be very different, which is why it is so impressive that this project works at all. Unfortunately it's not perfect yet and there are many instances where it cannot reconstruct something and bails out of reconstructing the entire function.</p>\n<h3 id=\"x86-disassemblers\"><a href=\"#x86-disassemblers\"></a>🤖 x86 disassemblers</h3>\n<blockquote>\n<p>Disassemblers turn binary into assembly. IDA is probably the best x86 disassembler (but automatic subroutine renaming based on reflection metadata doesn't work on free version).</p>\n</blockquote>\n<p>Disassemblers turn machine code (eg. compiled C++, the raw 1s and 0s CPUs understand) into assembly (human-readable list of CPU instructions, not to be confused with C# assemblies which I mentioned above). There are many x86 disassemblers but two of the most popular are <a href=\"https://hex-rays.com/ida-free/\">IDA</a> and <a href=\"https://ghidra-sre.org/\">Ghidra</a>. IDA is better but many useful features are only in the paid version, while Ghidra is free and open-source. Il2CppInspector supports creating scripts for automatically renaming the subroutines identified by IDA and Ghidra to their real names based on the IL reflection metadata but unfortunately IDA free cannot run scripts and there were heaps of errors in the Ghidra file. 😕 In the end I just manually renamed subroutines every time I saw a <code>call</code> instruction as I was reading the disassembled code by cross-referencing the called address with the table produced by Il2CppInspector. 😒</p>\n<p>Assembly code is pretty easy to read but hard to understand since it is so low-level. An example of assembly instructions is this:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">rax</span>, <span class=\"hljs-number\">100</span>   <span class=\"hljs-comment\">; adds 100 to the rax register</span>\n<span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">rax</span>, <span class=\"hljs-built_in\">rbx</span>   <span class=\"hljs-comment\">; adds the value in rbx to rax</span>\n<span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">rax</span>, [<span class=\"hljs-number\">100</span>] <span class=\"hljs-comment\">; adds the value in memory at address 100 to rax</span>\n<span class=\"hljs-keyword\">add</span> <span class=\"hljs-built_in\">rax</span>, [<span class=\"hljs-built_in\">rbx</span>] <span class=\"hljs-comment\">; adds the value in memory at address pointed to by rbx to rax</span>\n</code></pre>\n<p>Basically the CPU has several registers which store a small amount of data (eg. a 64-bit integer) and reads/executes instructions from memory which operate on these registers. As you read through the assembly code, you can look up what instructions do and what registers are generally used for on Google and in CPU reference manuals to gradually learn everything.</p>\n<p>I have some prior experience with x86 assembly so have no issues reading it but I'm not sure about conventions like where C++ usually stores arguments before calling another subroutine. Also there's just so much state you need to keep in your head to understand what's going on. 😵‍💫</p>\n<h3 id=\"inspecting-a-running-game\"><a href=\"#inspecting-a-running-game\"></a>⏯️ Inspecting a running game</h3>\n<blockquote>\n<p>The incredible UnityExplorer mod lets you view and edit classes/methods/properties while the game is running.</p>\n</blockquote>\n<p>There is an amazing mod called <a href=\"https://github.com/sinai-dev/UnityExplorer\">UnityExplorer</a> which reads the reflection metadata of the running game and allows you to view classes, edit properties, call methods and even has a C# REPL where you can run any script you want. All in real time while the game is running! 🤯 This mod was extremely helpful to quickly figure out how the boss claw works.</p>\n<h2 id=\"reverse-engineering-the-boss-claw\"><a href=\"#reverse-engineering-the-boss-claw\"></a>🗜️ Reverse engineering the boss claw</h2>\n<p>Alright, we're finally ready to start figuring out the internals of the boss claw! First thing is to load up the game, go to Streets and play around with UnityExplorer while watching the boss claw: watch how properties change as it moves, hook into methods to see when they're called, manually change properties and call methods to see what they do. Through this I found that its behaviour is controlled by the <code>BossClawAi</code> class (luckily to my surprise it was called the same thing in code as what the speedrunning community calls it) and I didn't spend time to learn <em>everything</em> but here's what I was able to infer about its properties and methods:</p>\n<pre><code class=\"hljs language-c#\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">BossClawAi</span> : <span class=\"hljs-title\">MonoBehaviour</span>\n{\n    <span class=\"hljs-comment\">// === Important things for boss claw RNG! ===</span>\n\n    <span class=\"hljs-comment\">// The position it starts at (in the middle of the street)</span>\n    <span class=\"hljs-keyword\">public</span> Vector3 _homePosition { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// A plane that extends this many units from _homePosition in X and Z</span>\n    <span class=\"hljs-comment\">// directions. When patrolling it will choose a random point on this plane</span>\n    <span class=\"hljs-comment\">// to patrol to. The Z component is 0 (I assume an early version of the claw</span>\n    <span class=\"hljs-comment\">// behaved more like an arcade machine claw which can move in two dimensions</span>\n    <span class=\"hljs-comment\">// but the mechanics of the overhead arms would be complicated for it to go</span>\n    <span class=\"hljs-comment\">// to the drop-off point so they made it held up by an overhead track</span>\n    <span class=\"hljs-comment\">// instead and just reduced the Z to 0 to stay on the track).</span>\n    <span class=\"hljs-keyword\">public</span> Vector2 patrolXz { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Manages pathing, movement and current target position. The claw is very</span>\n    <span class=\"hljs-comment\">// simple so barely needs an AI but it does have to go around a corner to</span>\n    <span class=\"hljs-comment\">// reach the drop-off point so I guess it makes sense to have one.</span>\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AI.NavMeshAgent _navAgent { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Called on each frame to perform claw logic.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AiTick</span>()</span>;\n\n\n    <span class=\"hljs-comment\">// === Others ===</span>\n\n    <span class=\"hljs-comment\">// How often AiTick() is called.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _aiTickFreq { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Last time AiTick() was called.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _lastAiTickTime { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// How often to move to a random patrol point.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> patrolFrequency { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Time when it last moved to a random patrol point.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _patrolTimer { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// List of targets it wants to pick up.</span>\n    <span class=\"hljs-keyword\">public</span> List&#x3C;TriggerRefProxy> targetList { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Target it's currently going for.</span>\n    <span class=\"hljs-keyword\">public</span> TriggerRefProxy _activeTarget { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Percentage it's currently extended to the ground.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _curExtension { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Speed it is extending to the ground.</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _extensionVelocity { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Called when it has grabbed something.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> <span class=\"hljs-title\">CaughtPrey</span>()</span>;\n    <span class=\"hljs-comment\">// Called on each frame.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Update</span>()</span>;\n    <span class=\"hljs-comment\">// Called on each frame.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">FixedUpdate</span>()</span>;\n    <span class=\"hljs-comment\">// Called on load.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">Awake</span>()</span>;\n    <span class=\"hljs-comment\">// Change state.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SwitchMentalState</span>(<span class=\"hljs-params\">MentalState mState</span>)</span>;\n    <span class=\"hljs-comment\">// Change state.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SwitchPounceState</span>(<span class=\"hljs-params\">PounceState pState</span>)</span>;\n    <span class=\"hljs-comment\">// Set whether to show the blue barrier when picking something up.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ToggleScoop</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">bool</span> toggleOn</span>)</span>;\n    <span class=\"hljs-comment\">// Starts calling AiTick() on each frame. Claw becomes active after jumping</span>\n    <span class=\"hljs-comment\">// the wall in a run. Before then it just sits at the home position. I</span>\n    <span class=\"hljs-comment\">// assume this is for performance since the player won't see the claw when</span>\n    <span class=\"hljs-comment\">// they're somewhere else.</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetActive</span>()</span>;\n    <span class=\"hljs-comment\">// Stop calling AiTick().</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetDeactive</span>()</span>;\n\n    <span class=\"hljs-comment\">// === State === (including config for default)</span>\n    <span class=\"hljs-keyword\">public</span> MentalState _defaultState { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> PounceState _pounceState { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> MentalState _mentalState { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-comment\">// === Config for movement ===</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _baseAcceleration { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> acceleration { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> speed { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-comment\">// === Config for when it is attempting to grab something ===</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> pounceSpeedMult { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> pounceAccelMult { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> pounceSpringMult { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> pounceDamperMult { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> maxExtension { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> extensionTime { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-comment\">// === Config for springiness when it's picking something up ===</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> scoopSpringXz { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> scoopDamperXz { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> retractionTime { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-comment\">// === Physics ===</span>\n    <span class=\"hljs-comment\">// (for moving the segments between the top and bottom of the claw)</span>\n    <span class=\"hljs-keyword\">public</span> Rigidbody _baseRb { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> ConfigurableJoint _jointBase { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> ConfigurableJoint _jointSpineA { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> ConfigurableJoint _jointSpineB { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> ConfigurableJoint _jointSpineC { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> ConfigurableJoint _jointCabin { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n\n    <span class=\"hljs-comment\">// === Audio ===</span>\n    <span class=\"hljs-keyword\">public</span> UnityEngine.Audio.AudioMixerGroup _mixerGroup { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> AudioPlayer _articulationPlayer { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> AudioPlayer _movementPlayer { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AudioClip movementLoop { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AudioClip articulationLoop { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AudioClip charge { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AudioClip _scoopOn { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-keyword\">public</span> UnityEngine.AudioClip _scoopOff { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AttenuateMovementLoop</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">ref</span> AudioPlayer player, Transform parentTransform, <span class=\"hljs-built_in\">float</span> volume, <span class=\"hljs-built_in\">float</span> pitch</span>)</span>;\n\n    <span class=\"hljs-comment\">// === Not totally sure about the rest of these ===</span>\n    <span class=\"hljs-comment\">// Maybe AiTick() debounces and this bypasses that on next call?</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">bool</span> _forceAiTick { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Decides which objects it should try to pick up?</span>\n    <span class=\"hljs-keyword\">public</span> LayerMask preyLayers { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Map of targets to something?</span>\n    <span class=\"hljs-keyword\">public</span> Dictionary&#x3C;TriggerRefProxy, <span class=\"hljs-built_in\">int</span>> _targetRefCount { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Some kind of ID for the current target?</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">ulong</span> _activeTargetId { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// How far it should extend downwards to pick up its target?</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _targetExtension { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// For timing when to pounce again after missing a pounce?</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">float</span> _pounceTimer { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// What objects are inside the claw?</span>\n    <span class=\"hljs-keyword\">public</span> Il2CppReferenceArray&#x3C;Collider> _boxCheckResults { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// The area inside the claw which counts as grabbed?</span>\n    <span class=\"hljs-keyword\">public</span> Transform _boxCheck { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// Where to drop off grabbed objects?</span>\n    <span class=\"hljs-keyword\">public</span> Transform unloadPoint { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// ?</span>\n    <span class=\"hljs-keyword\">public</span> Vector3 _scoopDisplace { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// ?</span>\n    <span class=\"hljs-keyword\">public</span> Il2CppReferenceArray&#x3C;GameObject> _scoopObjects { <span class=\"hljs-keyword\">get</span>; <span class=\"hljs-keyword\">set</span>; }\n    <span class=\"hljs-comment\">// ?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">CheckTarget</span>()</span>;\n    <span class=\"hljs-comment\">// Stops moving?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">ClearPath</span>()</span>;\n    <span class=\"hljs-comment\">// Move to somewhere?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetPath</span>(<span class=\"hljs-params\">Vector3 target</span>)</span>;\n    <span class=\"hljs-comment\">// How \"diagonal\" the claw is as it extends?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">SetScoopXzDrives</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">float</span> spring, <span class=\"hljs-built_in\">float</span> damper</span>)</span>;\n    <span class=\"hljs-comment\">// ?</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">TriggerStateChange</span>(<span class=\"hljs-params\">TriggerRefProxy trp, <span class=\"hljs-built_in\">bool</span> enter = <span class=\"hljs-literal\">true</span></span>)</span>;\n\n    <span class=\"hljs-comment\">// === Different possible states ===</span>\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">enum</span> MentalState\n    {\n        Rest = <span class=\"hljs-number\">0</span>,\n        Patrol = <span class=\"hljs-number\">1</span>,\n        Pounce = <span class=\"hljs-number\">2</span>,\n        Unload = <span class=\"hljs-number\">3</span>\n    }\n    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-built_in\">enum</span> PounceState\n    {\n        Charge = <span class=\"hljs-number\">0</span>,\n        Drop = <span class=\"hljs-number\">1</span>,\n        Scoop = <span class=\"hljs-number\">2</span>,\n        Check = <span class=\"hljs-number\">3</span>\n    }\n}\n</code></pre>\n<p>Note that many of these types (eg. <a href=\"https://docs.unity3d.com/ScriptReference/AI.NavMeshAgent.html\"><code>UnityEngine.AI.NavMeshAgent</code></a> or <a href=\"https://docs.unity3d.com/ScriptReference/Vector3.html\"><code>Vector3</code></a>) can be looked up in the Unity documentation to understand how they work.</p>\n<h3 id=\"building-the-mod\"><a href=\"#building-the-mod\"></a>🧑‍💻 Building the mod</h3>\n<p>From this I had all the information I needed to build a mod which makes the boss claw patrol to the finish of the level 100% of the time. Using the <code>OnSceneWasInitialized</code> hook in the <a href=\"https://melonwiki.xyz/\">MelonLoader mod framework</a> I found the <code>BossClawAi</code> by using the standard Unity APIs (<code>FindObjectOfType()</code>) and simply changed the <code>_homePosition</code> to the point where I wanted the claw to go and set <code>patrolXz</code> to <code>(0, 0)</code> so it would always go to exactly that point.</p>\n<p>Since there was the possibility of cheating runs with this mod (consciously or accidentally) I also had it paint the boss claw green so it's obvious the mod is active.</p>\n<p>Also interesting to note here is that MelonLoader comes with a library called <a href=\"https://harmony.pardeike.net/\">Harmony</a> which allows \"patching\" methods. This replaces the code at the memory address of the method with a stub that calls your <code>Prefix</code> handler, the original method, then your <code>Postfix</code> handler. I didn't need to use it for my mod though, since I could do everything with standard Unity APIs and the built-in MelonLoader hooks.</p>\n<h4 id=\"links\"><a href=\"#links\"></a>Links</h4>\n<p>If you're interested in the mod, here are the links to download and see the code:</p>\n<ul>\n<li>Installation link: <a href=\"https://boneworks.thunderstore.io/package/jakzo/SpeedrunTools/\">https://boneworks.thunderstore.io/package/jakzo/SpeedrunTools/</a></li>\n<li>Mod repository: <a href=\"https://github.com/jakzo/BoneworksSpeedrunTools\">https://github.com/jakzo/BoneworksSpeedrunTools</a></li>\n</ul>\n<h3 id=\"decompiling-the-code\"><a href=\"#decompiling-the-code\"></a>🔍 Decompiling the code</h3>\n<p>I still wanted to know if the point it goes to was truly random though. To do this I used Cpp2IL to decompile the IL2CPP assembly back into IL using this command:</p>\n<pre><code class=\"hljs language-powershell\">.\\Cpp2IL<span class=\"hljs-literal\">-2022</span>.<span class=\"hljs-number\">0.5</span><span class=\"hljs-literal\">-Windows</span>.exe <span class=\"hljs-literal\">--game-path</span> <span class=\"hljs-string\">\"C:\\Program Files (x86)\\Steam\\steamapps\\common\\BONEWORKS\\BONEWORKS\"</span> <span class=\"hljs-literal\">--experimental-enable-il-to-assembly-please</span>\n</code></pre>\n<p>The success rate of decompilation was 47% and unfortunately when I opened the output in dnSpy I found that <code>AiTick()</code> failed to decompile. 🙁</p>\n<p>Output:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-attr\">[Info]</span> <span class=\"hljs-selector-attr\">[Program]</span> Overall analysis success rate: <span class=\"hljs-number\">47%</span> (<span class=\"hljs-number\">8617</span>) of <span class=\"hljs-number\">18267</span> methods.\n</code></pre>\n<p>What dnSpy shows:</p>\n<pre><code class=\"hljs language-c#\"><span class=\"hljs-comment\">// Token: 0x0600074B RID: 1867 RVA: 0x00002050 File Offset: 0x00000250</span>\n[<span class=\"hljs-meta\">Token(Token = <span class=\"hljs-string\">\"0x600055C\"</span>)</span>]\n[<span class=\"hljs-meta\">Address(RVA = <span class=\"hljs-string\">\"0x4EB1A0\"</span>, Offset = <span class=\"hljs-string\">\"0x4E99A0\"</span>, VA = <span class=\"hljs-string\">\"0x1804EB1A0\"</span>)</span>]\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">AiTick</span>()</span>\n{\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> AnalysisFailedException(<span class=\"hljs-string\">\"CPP2IL failed to recover any usable IL for this method.\"</span>);\n}\n</code></pre>\n<h3 id=\"disassembling-the-code\"><a href=\"#disassembling-the-code\"></a>🔬 Disassembling the code</h3>\n<p>My backup plan was to read the assembly directly, so I loaded the game's assembly (<code>GameAssembly.dll</code>) into IDA. In addition to just converting the machine code, IDA analyses and works out the boundaries of all the subroutines and displays the disassembled code in a nice graph format. I ran Il2CppInspector on the game to find the address of <code>BossClawAi.AiTick()</code> and opened the subroutine graph at that address, since the logic for deciding where to go is probably in here. I knew that there should be a call to <code>NavMeshAgent.SetDestination()</code> just after it figures out the point it wants to patrol to so I searched for calls to its address in this subroutine and found a few of them. For each of these calls I worked backwards through the code, renaming any <code>call</code> instructions as I came across them to change the opaque memory address into a function name by cross-referencing the address with Il2CppInspector's output. Eventually I found what I think is the call that sends the boss claw to patrol.</p>\n<p>The segment of assembly from IDA that sends the boss claw to a random point:</p>\n<pre><code class=\"hljs language-x86asm\"><span class=\"hljs-symbol\">loc_1804EC38A:</span>                          <span class=\"hljs-comment\">; CODE XREF: sub_1804EB1A0+118C↑j</span>\n                                        <span class=\"hljs-comment\">; sub_1804EB1A0+11D4↑j</span>\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">xmm6</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">108h</span>]\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">ecx</span>, <span class=\"hljs-built_in\">ecx</span>\n                <span class=\"hljs-keyword\">call</span>    Time_get_time\n                <span class=\"hljs-keyword\">comiss</span>  <span class=\"hljs-built_in\">xmm6</span>, <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">ja</span>      loc_1804EBB03\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">xmm6</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">70h</span>]\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">ecx</span>, <span class=\"hljs-built_in\">ecx</span>\n                <span class=\"hljs-keyword\">call</span>    Time_get_time\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">xmm1</span>, <span class=\"hljs-built_in\">cs</span>:dword_1817BB6EC\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">ecx</span>, <span class=\"hljs-built_in\">ecx</span>\n                <span class=\"hljs-keyword\">movsd</span>   <span class=\"hljs-built_in\">xmm8</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">118h</span>]\n                <span class=\"hljs-keyword\">mov</span>     <span class=\"hljs-built_in\">ebx</span>, [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">120h</span>]\n                <span class=\"hljs-keyword\">divss</span>   <span class=\"hljs-built_in\">xmm1</span>, <span class=\"hljs-built_in\">xmm6</span>\n                <span class=\"hljs-keyword\">addss</span>   <span class=\"hljs-built_in\">xmm0</span>, <span class=\"hljs-built_in\">xmm1</span>\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">108h</span>], <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">call</span>    Random_1_get_value        <span class=\"hljs-comment\">; === Random patrol area X?</span>\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">xmm6</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">68h</span>]\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">ecx</span>, <span class=\"hljs-built_in\">ecx</span>\n                <span class=\"hljs-keyword\">movaps</span>  <span class=\"hljs-built_in\">xmm7</span>, <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">call</span>    Random_1_get_value        <span class=\"hljs-comment\">; === Random patrol area Z?</span>\n                <span class=\"hljs-keyword\">movss</span>   <span class=\"hljs-built_in\">xmm1</span>, <span class=\"hljs-built_in\">dword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">6Ch</span>]\n                <span class=\"hljs-keyword\">lea</span>     <span class=\"hljs-built_in\">rcx</span>, [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_D0]\n                <span class=\"hljs-keyword\">movaps</span>  <span class=\"hljs-built_in\">xmm3</span>, <span class=\"hljs-built_in\">xmm1</span>\n                <span class=\"hljs-keyword\">mulss</span>   <span class=\"hljs-built_in\">xmm7</span>, <span class=\"hljs-built_in\">xmm6</span>\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">eax</span>, <span class=\"hljs-built_in\">eax</span>\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_F0], <span class=\"hljs-built_in\">r14</span>\n                <span class=\"hljs-keyword\">mulss</span>   <span class=\"hljs-built_in\">xmm3</span>, <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">xorps</span>   <span class=\"hljs-built_in\">xmm2</span>, <span class=\"hljs-built_in\">xmm2</span>\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_D0], <span class=\"hljs-built_in\">rax</span>\n                <span class=\"hljs-keyword\">addss</span>   <span class=\"hljs-built_in\">xmm7</span>, <span class=\"hljs-built_in\">xmm7</span>\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_C8], <span class=\"hljs-built_in\">eax</span>\n                <span class=\"hljs-keyword\">addss</span>   <span class=\"hljs-built_in\">xmm3</span>, <span class=\"hljs-built_in\">xmm3</span>\n                <span class=\"hljs-keyword\">subss</span>   <span class=\"hljs-built_in\">xmm7</span>, <span class=\"hljs-built_in\">xmm6</span>\n                <span class=\"hljs-keyword\">subss</span>   <span class=\"hljs-built_in\">xmm3</span>, <span class=\"hljs-built_in\">xmm1</span>\n                <span class=\"hljs-keyword\">movaps</span>  <span class=\"hljs-built_in\">xmm1</span>, <span class=\"hljs-built_in\">xmm7</span>\n                <span class=\"hljs-keyword\">call</span>    Coord_1_ToVector3\n                <span class=\"hljs-keyword\">mov</span>     <span class=\"hljs-built_in\">rcx</span>, <span class=\"hljs-built_in\">cs</span>:qword_181EA6150\n                <span class=\"hljs-keyword\">test</span>    <span class=\"hljs-built_in\">byte</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rcx</span>+<span class=\"hljs-number\">127h</span>], <span class=\"hljs-number\">2</span>\n                <span class=\"hljs-keyword\">jz</span>      short loc_1804EC446\n                <span class=\"hljs-keyword\">cmp</span>     [<span class=\"hljs-built_in\">rcx</span>+<span class=\"hljs-number\">0D8h</span>], <span class=\"hljs-built_in\">r14d</span>\n                <span class=\"hljs-keyword\">jnz</span>     short loc_1804EC446\n                <span class=\"hljs-keyword\">call</span>    il2cpp_runtime_class_init_0\n<span class=\"hljs-symbol\">loc_1804EC446:</span>                          <span class=\"hljs-comment\">; CODE XREF: sub_1804EB1A0+1296↑j</span>\n                                        <span class=\"hljs-comment\">; sub_1804EB1A0+129F↑j</span>\n                <span class=\"hljs-keyword\">movsd</span>   <span class=\"hljs-built_in\">xmm0</span>, [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_D0]\n                <span class=\"hljs-keyword\">lea</span>     <span class=\"hljs-built_in\">r8</span>, [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_E0]\n                <span class=\"hljs-keyword\">mov</span>     <span class=\"hljs-built_in\">eax</span>, [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_C8]\n                <span class=\"hljs-keyword\">lea</span>     <span class=\"hljs-built_in\">rdx</span>, [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_C0]\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">r9d</span>, <span class=\"hljs-built_in\">r9d</span>\n                <span class=\"hljs-keyword\">movsd</span>   [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_E0], <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">lea</span>     <span class=\"hljs-built_in\">rcx</span>, [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_90]\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_D8], <span class=\"hljs-built_in\">eax</span>\n                <span class=\"hljs-keyword\">movsd</span>   [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_C0], <span class=\"hljs-built_in\">xmm8</span>\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rbp</span>+<span class=\"hljs-number\">57h</span>+var_B8], <span class=\"hljs-built_in\">ebx</span>\n                <span class=\"hljs-keyword\">call</span>    Vector3_op_Addition\n                <span class=\"hljs-keyword\">mov</span>     <span class=\"hljs-built_in\">rcx</span>, [<span class=\"hljs-built_in\">rdi</span>+<span class=\"hljs-number\">18h</span>]\n                <span class=\"hljs-keyword\">test</span>    <span class=\"hljs-built_in\">rcx</span>, <span class=\"hljs-built_in\">rcx</span>\n                <span class=\"hljs-keyword\">jz</span>      short loc_1804EC4B2\n                <span class=\"hljs-keyword\">movsd</span>   <span class=\"hljs-built_in\">xmm0</span>, <span class=\"hljs-built_in\">qword</span> <span class=\"hljs-built_in\">ptr</span> [<span class=\"hljs-built_in\">rax</span>]\n                <span class=\"hljs-keyword\">lea</span>     <span class=\"hljs-built_in\">rdx</span>, [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_E0]\n                <span class=\"hljs-keyword\">mov</span>     <span class=\"hljs-built_in\">eax</span>, [<span class=\"hljs-built_in\">rax</span>+<span class=\"hljs-number\">8</span>]\n                <span class=\"hljs-keyword\">xor</span>     <span class=\"hljs-built_in\">r8d</span>, <span class=\"hljs-built_in\">r8d</span>\n                <span class=\"hljs-keyword\">movsd</span>   [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_E0], <span class=\"hljs-built_in\">xmm0</span>\n                <span class=\"hljs-keyword\">mov</span>     [<span class=\"hljs-built_in\">rsp</span>+<span class=\"hljs-number\">110h</span>+var_D8], <span class=\"hljs-built_in\">eax</span>\n                <span class=\"hljs-keyword\">call</span>    BehaviourBaseNav_SetPath <span class=\"hljs-comment\">; === Send boss claw to point</span>\n                <span class=\"hljs-keyword\">jmp</span>     loc_1804EBB03\n</code></pre>\n<p>What I found was what I was expecting (a call to get a random value followed by <code>NavMeshAgent.SetDestination()</code>) but not what I was hoping for 😞 (some logic which could be manipulated to force it to go in a certain direction). Although it's important to note that I'm not 100% certain on this. Assembly is complicated. I haven't worked out the purpose of every single instruction and there are so many other code paths in the function. There may be some trick to trigger one of the other <code>NavMeshAgent.SetDestination()</code> calls to send it in the desired direction. 🤷</p>\n<h2 id=\"conclusion\"><a href=\"#conclusion\"></a>📃 Conclusion</h2>\n<p>Through this I've learnt a lot about reverse engineering. Sometimes you can get lucky and get C# code to read, other times it's a painful and manual process of reading assembly and cross-referencing against metadata memory addresses. But at this point I feel pretty confident to reverse engineer some aspect of a Unity game and what tools are available. Hope you've learnt a bit about this too from this post! 👍</p>"}}